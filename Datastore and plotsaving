local ServerStorage = game:GetService("ServerStorage")
local Rep = game:GetService("ReplicatedStorage")
local DataStoreService = game:GetService("DataStoreService")
local SS = game:GetService("ServerStorage")
local SSS = game:GetService("ServerScriptService")
local RunService = game:GetService("RunService")
local PlrData = DataStoreService:GetDataStore("PlrData")

local FullData = {}

-- plot creation
local PlotIndexFolder = workspace:WaitForChild("PlotIndex")
local assignedPlots = {} 

function GetPlrPlot(plrName)
	for Plot, playerName in pairs(assignedPlots) do
		if playerName == plrName then
			return Plot
		end
	end
end

function FindFreePlot(Plr)
	for _, plotPart in ipairs(PlotIndexFolder:GetChildren()) do
		if not assignedPlots[plotPart] then
			assignedPlots[plotPart] = Plr.Name
			return plotPart
		end
	end

	return nil
end

function CreatePlot(Plr, PlrFolder, FreePlot)
	local gridSize = 10
	local blockSize = 3
	local totalSize = gridSize * blockSize

	local refPosition = FreePlot.Position

	local startX = refPosition.X - totalSize / 2 + blockSize / 2
	local startY = refPosition.Y + blockSize / 2 + FreePlot.Size.Y / 2
	local startZ = refPosition.Z - totalSize / 2 + blockSize / 2

	for x = 1, gridSize do
		for z = 1, gridSize do
			local Grid = script.Grid:Clone()
			local pos = Vector3.new(startX + (x - 1) * blockSize, startY, startZ + (z - 1) * blockSize)
			Grid:SetPrimaryPartCFrame(CFrame.new(pos))
			Grid.Parent = PlrFolder.Floor
		end
	end
	
	local hitbox = Instance.new("Part")
	hitbox.Name = "PlotHitbox"
	hitbox.Size = Vector3.new(totalSize + .1, blockSize * 10 + .1, totalSize + .1)
	hitbox.Position = Vector3.new(refPosition.X, startY + (blockSize / 2) * 9, refPosition.Z) 
	hitbox.Anchored = true
	hitbox.Transparency = 1
	hitbox.CanCollide = false
	hitbox.CanQuery = false
	hitbox.Parent = PlrFolder
end

-- datastore
game.Players.PlayerAdded:Connect(function(player)
	local Char = player.Character or player.CharacterAdded:Wait()
	local Backpack = player:WaitForChild("Backpack")

	local success = nil
	local PlayerData
	local attempt = 0
	
	local leaderstats = Instance.new("Folder", player)
	leaderstats.Name = "Leaderstats"
	local Gems = Instance.new("IntValue", leaderstats)
	Gems.Name = "Coins"

	local PlayerInventory = Instance.new("Folder", SS)
	PlayerInventory.Name = player.Name.. "Inventory"
	
	-- Plot
	local PlrFolder = Instance.new("Folder")
	PlrFolder.Name = player.Name.. "Plot"
	PlrFolder.Parent = workspace.Plots

	local FloorFolder = Instance.new("Folder", PlrFolder)
	FloorFolder.Name = "Floor"

	local BlocksFolder = Instance.new("Folder", PlrFolder)
	BlocksFolder.Name = "Blocks"
	
	local DropsFolder = Instance.new("Folder", PlrFolder)
	DropsFolder.Name = "Drops"
	
	local DropScript = SSS:WaitForChild("DropsManager"):Clone()
	DropScript.Parent = PlrFolder
	DropScript.Enabled = true
	

	local FreePlot = FindFreePlot(player)
	if FreePlot then
		CreatePlot(player, PlrFolder, FreePlot)
	else
		warn("No plots available for player: " .. player.Name)
	end
	----

	repeat
		success, PlayerData = pcall(function()
			return PlrData:GetAsync(player.UserId)
		end)

		attempt += 1
		if not success then
			warn(PlayerData)
			task.wait(2)
		end
	until success or attempt == 5

	if success then
		print("Database loaded for ", player.Name)
		if not PlayerData then
			PlayerData = {
				Coins = 100,
				
			}

			print("Created Player Database for ", player.Name)
		end
		
		if PlayerData.Blocks then
			print("Loading Blocks")
		
			for blockName, blockData in pairs(PlayerData.Blocks) do
				local blockPosition = Vector3.new(
					blockData.Pos[1] + FreePlot.Position.X,
					blockData.Pos[2] + FreePlot.Position.Y,
					blockData.Pos[3] + FreePlot.Position.Z
				)
				
				local block = Rep.Blocks:FindFirstChild(blockData.Name):Clone()
				block:SetPrimaryPartCFrame(CFrame.new(blockPosition) * CFrame.Angles(math.rad(blockData.Orient[1]), math.rad(blockData.Orient[2]), math.rad(blockData.Orient[3])))
				block.Parent = BlocksFolder
				
				if block.Name == "CrateMaker" then
					for i, v in pairs(block:GetDescendants()) do
						if v:IsA("BasePart") or v:IsA("MeshPart") then
							v.Anchored = true
						elseif v:IsA("Motor6D") then
							v:Destroy()
						end
					end
				end
			end
			
			local RotateModel = Instance.new("Model", workspace)
			RotateModel.Name = "RotateModel"
			local PPart = Instance.new("Part", RotateModel)
			PPart.Anchored = true
			
			RotateModel.PrimaryPart = PPart
			RotateModel:SetPrimaryPartCFrame(CFrame.new(FreePlot.Position))
			
			for i,v in pairs(BlocksFolder:GetChildren()) do
				v.Parent = RotateModel
			end

			RotateModel:PivotTo(RotateModel:GetPivot() * CFrame.Angles(0, math.rad(FreePlot.Orientation.Y), 0))
			
			for i,v in pairs(RotateModel:GetChildren()) do
				v.Parent = BlocksFolder
			end
		end
		
		if PlayerData.Inventory then
			for ValueName, Value in pairs(PlayerData.Inventory) do
				local NewValue = Instance.new("IntValue", PlayerInventory)
				NewValue.Name = ValueName
				NewValue.Value = Value.Amount
			end
		end
		
		FullData[player.UserId] = PlayerData
	else
		warn("Couldnt load datastore for" ,player.Name)
		player:Kick("Unable to load your data. Try later")
	end
	
	for i,v in pairs(Backpack:GetChildren()) do
		if v:IsA("Tool") and not PlayerInventory:FindFirstChild(v.Name) then
			local NewValue = Instance.new("IntValue", PlayerInventory)
			NewValue.Name = v.Name
			NewValue.Value = 1
		end
	end
	Backpack.ChildAdded:Connect(function(v)
		if v:IsA("Tool") and not PlayerInventory:FindFirstChild(v.Name) then
			local NewValue = Instance.new("IntValue", PlayerInventory)
			NewValue.Name = v.Name
		end
	end)
	
	for i,v in pairs(PlayerInventory:GetChildren()) do
		spawn(function()
			local Tool = nil
			if not Backpack:FindFirstChild(v.Name) then
				Tool = SS.Tools:WaitForChild(v.name):Clone()
				Tool.Parent = Backpack
				Tool:SetAttribute("quantity", v.Value)
			else
				Tool = Backpack:FindFirstChild(v.Name)
				Tool:SetAttribute("quantity", v.Value)
			end

			v:GetPropertyChangedSignal("Value"):Connect(function()
				Tool:SetAttribute("quantity", v.Value)
			end)
		end)
	end
	
	PlayerInventory.ChildAdded:Connect(function(v)
		spawn(function()
			local Tool = nil
			if not Backpack:FindFirstChild(v.Name) then
				Tool = SS.Tools:WaitForChild(v.name):Clone()
				Tool.Parent = Backpack
				Tool:SetAttribute("quantity", v.Value)
			else
				Tool = Backpack:FindFirstChild(v.Name)
				Tool:SetAttribute("quantity", v.Value)
			end

			v:GetPropertyChangedSignal("Value"):Connect(function()
				Tool:SetAttribute("quantity", v.Value)
			end)
		end)
	end)
end)

function PlayerLeaving(player)
	local PlrPlot = GetPlrPlot(player.Name)
	assignedPlots[PlrPlot] = nil
	
	if FullData[player.UserId] then
		local success = nil
		local errorMsg = nil
		local attempt = 0

		FullData[player.UserId].Blocks = {}
		FullData[player.UserId].Inventory = {}
		
		local plotFolder = workspace.Plots:FindFirstChild(player.Name .. "Plot")
		local blocksFolder = plotFolder:FindFirstChild("Blocks")
		local blockIndex = 0
		
		local RotateModel = Instance.new("Model", workspace)
		RotateModel.Name = "RotateModel"
		local PPart = Instance.new("Part", RotateModel)
		PPart.Anchored = true

		RotateModel.PrimaryPart = PPart
		RotateModel:SetPrimaryPartCFrame(CFrame.new(PlrPlot.Position))

		for i,v in pairs(blocksFolder:GetChildren()) do
			v.Parent = RotateModel
		end

		RotateModel:PivotTo(RotateModel:GetPivot() * CFrame.Angles(0, -math.rad(PlrPlot.Orientation.Y), 0))

		for i,v in pairs(RotateModel:GetChildren()) do
			v.Parent = blocksFolder
		end
		
		for _, block in pairs(blocksFolder:GetChildren()) do
			if block:IsA("Model") then

				local relativePos = block.Hitbox.Position - PlrPlot.Position
				
				blockIndex = blockIndex + 1
				local uniqueKey = "Block_" .. blockIndex
				FullData[player.UserId].Blocks[uniqueKey] = {
					Name = block.Name,
					Pos = {relativePos.X, relativePos.Y, relativePos.Z},
					Orient = {block.Hitbox.Orientation.X, block.Hitbox.Orientation.Y, block.Hitbox.Orientation.Z},
				}
			end
		end
		
		local PlrInventory = SS:FindFirstChild(player.Name.. "Inventory")
		for _, Value in pairs(PlrInventory:GetChildren()) do
			FullData[player.UserId].Inventory[Value.Name] = {
				Amount = Value.Value
			}
		end

		repeat
			success, errorMsg = pcall(function()
				PlrData:SetAsync(player.UserId, FullData[player.UserId])
			end)

			attempt += 1
			if not success then
				warn(errorMsg)
				task.wait(2)
			end
		until success or attempt == 5

		if success then
			print("Data saved for", player.Name)
		else
			warn("Couldnt save datastore for" , player.Name)
		end
	end
end
game.Players.PlayerRemoving:Connect(PlayerLeaving)

function ServerShutdown()
	if RunService:IsStudio() then return end
	print("Server Shutting down")
	for i, player in pairs(game.Players:GetPlayers()) do
		task.spawn(function()
			PlayerLeaving(player)
		end)
	end
end
game:BindToClose(ServerShutdown)
